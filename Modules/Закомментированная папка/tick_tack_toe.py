import discord
from discord.ext import commands as BOT
from Imports.bin import info
import asyncio
import json
from Imports.util import GetMessage

class tick_tack_toe(BOT.Cog):

	def __init__(self, Bot):
		self.Bot = Bot


	@BOT.command()
	async def stavka(self, ctx, amount):
		with open("JSONs/main.json", "r") as f:
			users = json.load(f)
		bal = [users[str(user.id)]["Wallet"], users[str(user.id)]["Bank"]]

		bal[0] -= amount
		await ctx.send(f"{amount} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã –¥–ª—è –∏–≥—Ä—ã!")
		rezerv = amount

		with open("Modules/JSONs/reserv.json", 'w') as f:
			users = json.load(f)

	@BOT.command()
	async def ttt(self, ctx, member: discord.Member = None):

		player1 = ctx.author.name
		player2 = member.name

		text = player1 + " vs " + player2

		guild = ctx.guild

		if member == ctx.author:
			await ctx.send("–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è")
			
		elif member == guild.me:
			await ctx.send("–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞")
			
		else:
			perms = {
				guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True),
				ctx.author: discord.PermissionOverwrite(read_messages=True, send_messages=True),
				member: discord.PermissionOverwrite(read_messages=True, send_messages=True),
				guild.default_role: discord.PermissionOverwrite(read_messages=False)
				}

			channel = await ctx.guild.create_text_channel(name =f'{text}', overwrites = perms )
		
			await channel.send("__**||@here||**__")
			await channel.send("__**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É: –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏!**__")
			await channel.send("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–≤–æ—é –ø–æ–±–µ–¥—É. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç __**–í–°–ï!!!**__ . –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–≥–¥–∞ –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É!")
			
			
			questionList = [
				[f"–ò–≥—Ä–æ–∫ {ctx.author} –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É", "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ, –¥–∞–∂–µ 0 üòà"],
				[f"–ò–≥—Ä–æ–∫ {member} –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É", "–í—ã —Ç–æ–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ, –¥–∞–∂–µ 0 üëª "]
			]

			answers = {}

			for i, question in enumerate(questionList):
				answer = await GetMessage(self.Bot, ctx, question[0], question[1])

				if not answer:
					await ctx.send("–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤—ã –∏—Ö –Ω–µ –≤–≤–µ–ª–∏. –ò–≥—Ä–∞ –∑–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–∏—á—å–µ–π.")
					return

				answers[i] = answer				

				with open("JSONs/main.json", "r") as f:
					users = json.load(f)
				bal1 = [users[str(ctx.author.id)]["Wallet"], users[str(ctx.author.id)]["Bank"]]

				bal2 = [users[str(member.id)]["Wallet"], users[str(member.id)]["Bank"]]

				bal1 -= int(answers[0])
				bal2 -= int(answers[1])

				prize = answers[0] + answers[1]

def setup(Bot):
	Bot.add_cog(tick_tack_toe(Bot))