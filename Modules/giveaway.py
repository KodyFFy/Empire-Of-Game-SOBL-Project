import re
import random
import asyncio
import json

import discord
from discord.ext import commands

from Imports.util import GetMessage
import Modules.economy as economy


time_regex = re.compile(r"(?:(\d{1,5})(h|s|m|d))+?")
time_dict = {"h": 3600, "s": 1, "m": 60, "d": 86400}


def convert(argument):
    args = argument.lower()
    matches = re.findall(time_regex, args)
    time = 0
    for key, value in matches:
        try:
            time += time_dict[value] * float(key)

        except KeyError:
            raise commands.BadArgument(
                f"{value} is an invalid time key! "
                 "h|m|s|d are valid arguments")

        except ValueError:
            raise commands.BadArgument(f"{key} –Ω–µ —á–∏—Å–ª–æ!")
    return round(time)


class Giveaway(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    @commands.has_role("–ü—Ä–∏–∑–æ–≤—â–∏–∫")
    async def giveaway(self, ctx):
        await ctx.send("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ñ–æ—Ä–º—É –¥–ª—è –ö–æ–Ω–∫—É—Ä—Å–∞!")

        questionList = [
            ["–í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ö–æ–Ω–∫—É—Ä—Å?", "–ö–∞–∫–æ–π-—Ç–æ –∫–∞–Ω–∞–ª."],
            ["–ö–∞–∫ –¥–æ–ª–≥–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –∫–æ–Ω–∫—É—Ä—Å?", "`d|h|m|s`"],
            ["–ö–∞–∫–æ–π –ø—Ä–∏–∑ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—é?", "–õ—é–±–æ–π –ø—Ä–∏–∑"]
        ]

        answers = {}

        for i, question in enumerate(questionList):
            answer = await GetMessage(self.bot, ctx, question[0], question[1])

            if not answer:
                embed=discord.Embed(title="–û—à–∏–±–∫–∞!",
                    description="–í—ã –Ω–µ —É—Å—Ç–µ–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É? "
                                "–ó–Ω–∞—á–∏—Ç –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ...",
                    color=0xef3417)
                await ctx.send(embed=embed)
                return

            answers[i] = answer
        embed = discord.Embed(name="–ö–æ–Ω–∫—É—Ä—Å!")

        for key, value in answers.items():
            embed.add_field(
                name=f"–í–æ–ø—Ä–æ—Å: `{questionList[key][0]}`",
                value=f"–û—Ç–≤–µ—Ç: `{value}`",
                inline=False)

        m = await ctx.send("–í—Å–µ –≤–µ—Ä–Ω–æ?", embed=embed)
        await m.add_reaction("‚úÖ")
        await m.add_reaction("üáΩ")

        try:
            reaction, member = await self.bot.wait_for(
                "reaction_add",
                timeout=60,
                check=lambda reaction, user: user == ctx.author
                and reaction.message.channel == ctx.channel)

        except asyncio.TimeoutError:
            await ctx.send("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        if str(reaction.emoji) not in ["‚úÖ", "üáΩ"] or str(reaction.emoji) == "üáΩ":
            await ctx.send("–ö–æ–Ω–∫—É—Ä—Å –æ—Ç–º–µ–Ω–µ–Ω!")
            return

        channelId = re.findall(r"[0-9]+", answers[0])[0]
        channel = self.bot.get_channel(int(channelId))

        time = convert(answers[1])

        giveawayEmbed = discord.Embed(
            title="üéâ __**–ö–æ–Ω–∫—É—Ä—Å!**__ üéâ",
            description=answers[2])

        giveawayEmbed.set_footer(
            text=f"–ö–æ–Ω–∫—É—Ä—Å –æ–∫–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {time} —Å–µ–∫—É–Ω–¥, "
                  "–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

        await channel.send("||@here|| –ù–∞—á–∞–ª–æ –ö–æ–Ω–∫—É—Ä—Å–∞!")

        giveawayMessage = await channel.send(embed=giveawayEmbed)
        await giveawayMessage.add_reaction("üéâ")

        await asyncio.sleep(time)

        message = await channel.fetch_message(giveawayMessage.id)
        users = await message.reactions[0].users().flatten()
        users.pop(users.index(ctx.guild.me))

        if ctx.author in users:
            users.pop(users.index(ctx.author))

        if len(users) == 0:
            await channel.send("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!")
            return

        winner = random.choice(users)
        spl = answers[2].split()

        if spl[1] == "<:coin:791004475098660904>" or spl[1] == "\U0001fa99":
            user = winner
            await economy.open_account(user)

            users = await economy.get_main_data()
            users[str(user.id)]["Bank"] += int(spl[0])

            with open("JSONs/main.json", "w") as f:
                json.dump(users, f, indent = 3)

            await channel.send("**–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è - "
                               f"{winner.mention}!**\n–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ –Ω–∞ —Å—á–µ—Ç "
                               f"{answers[2]}.")

        else:
            await channel.send("**–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è - "
                              f"{winner.mention}!**\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ "
                              f"{ctx.author.mention} –∏–ª–∏ –∫ –∞–¥–º–∏–Ω–∞–º "
                              f"–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ {answers[2]}.")

"""
    @commands.command(aliases=["Raid", "raid"])
    @commands.has_permissions(administrator=True)
    async def __raid(self, ctx):

    	questionList = [
    		["–í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–≤–µ–Ω—Ç?", "–ö–∞–∫–æ–π-—Ç–æ –∫–∞–Ω–∞–ª."],
    		["–ö–∞–∫ –¥–æ–ª–≥–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –∏–≤–µ–Ω—Ç?", "`d|h|m|s`"],
    		["–°–ª–æ–∂–Ω–æ—Å—Ç—å", "–õ—é–±–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å(–õ–µ–≥–∫–æ, –°–ª–æ–∂–Ω–æ)"],
    		["–ö–∞–∫–æ–π –ª—É—á—à–∏–π –ø—Ä–∏–∑ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω?", "–õ—é–±–æ–π –ª—É—á—à–∏–π –ø—Ä–∏–∑"],
    		["–ö–∞–∫–æ–π –æ–±—ã—á–Ω—ã–π –ø—Ä–∏–∑ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω?", "–õ—é–±–æ–π –ø—Ä–∏–∑"],
    		["–ö–∞–∫–æ–π —à—Ç—Ä–∞—Ñ –±—É–¥–µ—Ç –ø—Ä–∏ –ø—Ä–æ–π–≥—Ä—ã—à–µ", "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–Ω–∏–∂–µ–Ω–∏–µ"]
    	]

    	answers = {}

    	for i, question in enumerate(questionList):
    		answer = await GetMessage(self.bot, ctx, question[0], question[1])

    		if not answer:
    			await ctx.send(
                  "–¢—ã –Ω–µ —É—Å–ø–µ–ª –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É. –ó–∞–ø–æ–ª–Ω—è–π –±—ã—Å—Ç—Ä–µ–π!")
    			return

    		answers[i] = answer
    	embed = discord.Embed(name="–†–µ–π–¥!")
    	for key, value in answers.items():
    		embed.add_field(
    			name=f"–í–æ–ø—Ä–æ—Å: `{questionList[key][0]}`",
                value=f"–û—Ç–≤–µ—Ç: `{value}`",
                inline=False)

    	m = await ctx.send("–í—Å–µ –≤–µ—Ä–Ω–æ?", embed=embed)
    	await m.add_reaction("‚úÖ")
    	await m.add_reaction("üáΩ")

    	try:
    		reaction, member = await self.bot.wait_for(
    			"reaction_add",
    			timeout=60,
    			check=lambda reaction, user: user == ctx.author
    			and reaction.message.channel == ctx.channel
    		)

    	except asyncio.TimeoutError:
    		await ctx.send("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    		return

    	if str(reaction.emoji) not in ["‚úÖ", "üáΩ"] or str(reaction.emoji) == "üáΩ":
    		await ctx.send("–†–µ–π–¥ –æ—Ç–º–µ–Ω–µ–Ω!")
    		return

    	channelId = re.findall(r"[0-9]+", answers[0])[0]
    	channel = self.bot.get_channel(int(channelId))

    	time = convert(answers[1])

    	RaidEmbed = discord.Embed(
    		title="‚öîÔ∏è __**–†–µ–π–¥!**__ ‚öîÔ∏è",
    		description=answers[2]
    	)
    	RaidEmbed.set_footer(
    		text=f"–†–µ–π–¥ –æ–∫–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {time} —Å–µ–∫—É–Ω–¥, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    	await ctx.send("||@here|| –ù–∞—á–∞–ª–æ –†–ï–ô–î–ê!")
    	RaidMessage = await channel.send(embed=RaidEmbed)

    	await RaidMessage.add_reaction("‚öîÔ∏è")
    	await RaidMessage.add_reaction("üõ°")
    	await RaidMessage.add_reaction("üíâ")

    	await asyncio.sleep(time)

    	message = await channel.fetch_message(RaidMessage.id)

    	dps = await message.reactions[0].users().flatten()
    	tanks = await message.reactions[1].users().flatten()
    	healers = await message.reactions[2].users().flatten()

    	dps.pop(dps.index(ctx.guild.me))
    	tanks.pop(tanks.index(ctx.guild.me))
    	healers.pop(healers.index(ctx.guild.me))

    	num_dps = len(dps)
    	num_tank = len(tank)
    	num_healer = len(healers)

    	lover = len(dps)+len(tanks)+len(healers)

    	min = 3
    	max = 12

    	with open("Modules/JSONs/rpg.json", "r") as f:
    		users = json.load(f)

    	if  lover < min:
    		await channel.send("–ö–æ–º–º–∞–Ω–¥–∞ –Ω–µ —Å–æ–±—Ä–∞–ª–∞—Å—å")
    		return

    	elif lover > max:
    		await channel.send("–í —Ä–µ–π–¥–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫")

    	win_num = 0.5

    	if (num_dps or num_tank or num_healer) > 3 and (num_dps or num_tank or num_healer) > (num_tank + num_healer):
    		win_num = 0.4

    		system(win_num, num_dps, num_tank, num_healer, dps, tank, healers)
    		print(system)

    	elif (num_dps or num_tank or num_healer) > 5 and (num_dps or num_tank or num_healer) > (num_tank + num_healer):
    		win_num = 0.3

    		system(win_num, num_dps, num_tank, num_healer, dps, tank, healers)
    		print(system)

    	system(win_num, num_dps, num_tank, num_healer, dps, tank, healers)
    	print(system)
"""

def setup(bot):
    bot.add_cog(Giveaway(bot))
