import discord
from discord.ext import commands as BOT
import json
import random
import asyncio
from bin import info


wait_beg = []
wait_rob = []


class Economy(BOT.Cog):
	def __init__(self, Bot):
		self.Bot = Bot

	@BOT.command(aliases=['cash', 'balance'])  # –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
	async def __balance(self, ctx, member: discord.Member = None):
		if member is None:
			await open_account(ctx.author)

			user = ctx.author
			users = await get_main_data()

			await ctx.send(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ, –¥–ª—è –∏–≥—Ä–æ–∫–∞ {ctx.author.mention}")
			embed = discord.Embed(
				title=f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {ctx.author}", color=0x7289da)

			wallet_amt = int(users[str(user.id)]['Wallet'])
			bank_amt = int(users[str(user.id)]['Bank'])

			embed.add_field(name="–ë–∞–ª–∞–Ω—Å",
							value=f"{wallet_amt} <:coin:791004475098660904>")
			embed.add_field(
				name="–ë–∞–Ω–∫", value=f"{bank_amt} <:coin:791004475098660904>")

			await ctx.send(embed=embed)

		else:
			await open_account(member)

			user = member
			users = await get_main_data()
			
			await ctx.send(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ, –∏–≥—Ä–æ–∫–∞ {member.mention}")
			embed = discord.Embed(
				title=f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.name}", color=0x7289da)

			wallet_amt = int(users[str(user.id)]['Wallet'])
			bank_amt = int(users[str(user.id)]['Bank'])

			embed.add_field(name="–ë–∞–ª–∞–Ω—Å ",
							value=f"{wallet_amt} <:coin:791004475098660904>")
			embed.add_field(
				name="–ë–∞–Ω–∫", value=f"{bank_amt} <:coin:791004475098660904>")

			await ctx.send(embed=embed)

	@BOT.command()
	@BOT.has_permissions(administrator=True)
	async def take(self, ctx, member: discord.Member, amount, var="Wallet"):

		await open_account(member)

		users = await get_main_data()
		user = member

		wallet_amt = int(users[str(user.id)]['Wallet'])
		bank_amt = int(users[str(user.id)]['Bank'])

		new_Walletamt = wallet_amt - int(amount)
		new_Bankamt = bank_amt - int(amount)

		if str(var) == "Bank" or str(var) == "bank":
			if new_Bankamt < 0:
				Bank_amt = int(users[str(user.id)]['Bank'])
				await update_bank(member, -1*int(Bank_amt), str(var))

			else:
				await update_bank(member, -1*int(amount), str(var))
			embed = discord.Embed(title="–ì–æ—Ç–æ–≤–æ!",
								  description=f"–ê–¥–º–∏–Ω—ã –∑–∞–±—Ä–∞–ª–∏ –∏–∑ –±–∞–Ω–∫–∞ {amount} <:coin:791004475098660904> —É –∏–≥—Ä–æ–∫–∞ {member.mention}",
								  color=0x7289da)
			await ctx.send(embed=embed)

		elif str(var) == "Wallet" or str(var) == "wallet":
			if new_Walletamt < 0:
				Wallet_amt = wallet_amt = int(users[str(user.id)]['Wallet'])
				await update_bank(member, -1*int(Wallet_amt), str(var))

			else:
				await update_bank(member, -1*int(amount), str(var))
			embed = discord.Embed(title="–ì–æ—Ç–æ–≤–æ!",
								  description=f"–ê–¥–º–∏–Ω—ã –∑–∞–±—Ä–∞–ª–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ {amount} <:coin:791004475098660904> —É –∏–≥—Ä–æ–∫–∞ {member.mention}",
								  color=0x7289da)
			await ctx.send(embed=embed)

		if var is None:
			if new_Walletamt < 0:
				Wallet_amt = wallet_amt = int(users[str(user.id)]['Wallet'])
				await update_bank(member, -1*int(Wallet_amt), str(var))

			else:
				await update_bank(member, -1*int(amount), str(var))
			embed = discord.Embed(title="–ì–æ—Ç–æ–≤–æ!",
								  description=f"–ê–¥–º–∏–Ω—ã –∑–∞–±—Ä–∞–ª–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ {amount} <:coin:791004475098660904> —É –∏–≥—Ä–æ–∫–∞ {member.mention}",
								  color=0x7289da)
			await ctx.send(embed=embed)

	@BOT.command()
	@BOT.has_permissions(administrator=True)
	async def give(self, ctx, member: discord.Member, amount):

		await open_account(member)
		users = await get_main_data()
		user = ctx.author

		await update_bank(member, 1*int(amount), "Bank")
		embed = discord.Embed(title="–ì–æ—Ç–æ–≤–æ!",
							  description=f"–ê–¥–º–∏–Ω—ã –¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É {member.mention} {amount} <:coin:791004475098660904>",
							  color=0x7289da)
		await ctx.send(embed=embed)

	@BOT.command(aliases=['beg', 'work'])  # –†–∞–±–æ—Ç–∞
	async def __beg(self, ctx):
		await open_account(ctx.author)

		users = await get_main_data()
		user = ctx.author

		earn = random.randrange(300)

		if not str(ctx.author.id) in wait_beg:
			embed = discord.Embed(title="–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
								  description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ctx.author.mention} –ø–æ–ª—É—á–∏–ª {earn} <:coin:791004475098660904>!",
								  color=0x7289da)
			await ctx.send(embed=embed)

			users[str(user.id)]['Wallet'] += earn

			wait_beg.append(str(ctx.author.id))

			with open('main.json', 'w') as f:
				json.dump(users, f)

			await asyncio.sleep(2*60*60)
			wait_beg.remove(str(ctx.author.id))

		else:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description=f"**{ctx.author.mention}** –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑ –≤ 2 —á–∞—Å–∞.",
								  color=0xef3417)
			await ctx.send(embed=embed)

	@BOT.command(aliases=['withdraw', 'decision'])  # –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–Ω–∫–∞
	async def __withdraw(self, ctx, amount=None):
		await open_account(ctx.author)
		if amount == None:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		bal = await update_bank(ctx.author)
		amount = int(amount)

		if amount > bal[1]:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ <:coin:791004475098660904> –Ω–∞ —Å—á–µ—Ç–µ **;~;**",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		if amount < 0:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–°—É–º–º–∞ <:coin:791004475098660904> –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		await update_bank(ctx.author, amount)
		await update_bank(ctx.author, -1*amount, "Bank")
		embed=discord.Embed(title="–ì–æ—Ç–æ–≤–æ!", description=f"–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª {amount} <:coin:791004475098660904>",
		    color=0x7289da)
		await ctx.send(embed=embed)

	@BOT.command(aliases=['deposit', 'put'])  # –°–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –≤ –±–∞–Ω–∫–µ
	async def __deposit(self, ctx, amount=None):
		await open_account(ctx.author)
		if amount == None:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ <:coin:791004475098660904>",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		bal = await update_bank(ctx.author)

		amount = int(amount)

		if amount > bal[0]:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ <:coin:791004475098660904> –Ω–∞ —Å—á–µ—Ç–µ **;~;**",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		if amount < 0:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–°—É–º–º–∞ <:coin:791004475098660904> –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		await update_bank(ctx.author, -1*amount)
		await update_bank(ctx.author, amount, "Bank")
		embed = discord.Embed(title="–ì–æ—Ç–æ–≤–æ!", description=f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–æ–∂–∏–ª –Ω–∞ —Å—á–µ—Ç {amount} <:coin:791004475098660904>",
							  color=0x7289da)
		await ctx.send(embed=embed)

	@BOT.command()  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏
	async def send(self, ctx, member: discord.Member, amount=None):
		await open_account(ctx.author)
		await open_account(member)
		if amount == None:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		bal = await update_bank(ctx.author)

		amount = int(amount)

		if amount > bal[1]:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ <:coin:791004475098660904> –Ω–∞ —Å—á–µ—Ç–µ **;~;**",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		if amount < 0:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–°—É–º–º–∞ <:coin:791004475098660904> –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		await update_bank(ctx.author, -1*amount, "Bank")
		await update_bank(member, amount, "Bank")
		embed = discord.Embed(title="–ì–æ—Ç–æ–≤–æ!",
							  description=f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention} –Ω–∞ —Å—á–µ—Ç {amount} <:coin:791004475098660904>",
							  color=0x7289da)
		await ctx.send(embed=embed)

	@BOT.command()  # –°–ª–æ—Ç—ã 3*
	async def slots(self, ctx, amount=None):

		await open_account(ctx.author)
		if amount == None:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏!",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		bal = await update_bank(ctx.author)
		amount = int(amount)
		if amount > bal[0]:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ <:coin:791004475098660904> –Ω–∞ —Å—á–µ—Ç–µ **;~;**",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		if amount < 0:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description="–°—É–º–º–∞ <:coin:791004475098660904> –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!",
								  color=0xef3417)
			await ctx.send(embed=embed)
			return

		final = []
		for i in range(3):
			a = random.choice(["üí∞", "üí°", "üîã"])
			final.append(a)
		l = ' '.join(final)
		await ctx.send("["+str(l)+"]")

		if final[0] == final[1] == final[2]:
			al = amount * 3
			embed = discord.Embed(title="**Wow!**",
								  description=f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª **–î–ñ–ï–ö–ü–û–¢!** –¢—ã –ø–æ–ª—É—á–∏–ª {al} <:coin:791004475098660904>",
								  color=0x7289da)
			await ctx.send(embed=embed)
			await update_bank(ctx.author, 3*amount)

		else:
			await update_bank(ctx.author, -1*amount)
			embed = discord.Embed(title="–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!",
								  description="–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª —Å–≤–æ—é —Å—Ç–∞–≤–∫—É! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç—ã —Ç–æ—á–Ω–æ –≤—ã–∏–≥—Ä–∞–µ—à—å!",
								  color=0x7289da)
			await ctx.send(embed=embed)

	@BOT.command()  # –û–≥—Ä–∞–±–∏—Ç—å
	async def rob(self, ctx, member: discord.Member):
		await open_account(ctx.author)
		await open_account(member)

		bal = await update_bank(member)

		if ctx.author.mention == member.mention:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!", description="–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ–±–æ–∫—Ä–∞—Å—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!",
				  				  color=0xef3417)
			await ctx.send(embed=embed)
			return

		if not str(ctx.author.id) in wait_rob:
			if bal[0] < 100:
				embed = discord.Embed(title="nope", description="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç!",
									  color=0x7289da)
				await ctx.send(embed=embed)
				return

			earning = random.randrange(0, bal[0]//3)
			random_event = random.randint(0, 100)

			if random_event >= 30:
				await update_bank(ctx.author, earning)
				await update_bank(member, -1*earning)
				embed = discord.Embed(title="–ì–æ—Ç–æ–≤–æ!",
									  description=f"–¢—ã —É–¥–∞—á–Ω–æ –æ–±–æ–∫—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}. –¢—ã —Å–≤–æ—Ä–æ–≤–∞–ª {earning} <:coin:791004475098660904>",
									  color=0x7289da)
				await ctx.send(embed=embed)

			else:
				plata = earning - (earning/3)
				await update_bank(ctx.author, -1*plata)
				await update_bank(member, earning)
				embed = discord.Embed(title="Oops...!",
									  description=f"–¢–µ–±—è –ø–æ–π–º–∞–ª–∏ –∑–∞ –≤–æ—Ä–æ–≤—Å—Ç–≤–æ —É {member.mention}. –¢–µ–±–µ –≤—ã–ø–∏—Å–∞–ª–∏ —à—Ç—Ä–∞—Ñ {earning} <:coin:791004475098660904>",
									  color=0x7289da)
				await ctx.send(embed=embed)

			wait_rob.append(str(ctx.author.id))

			await asyncio.sleep(6*60*60)

			wait_rob.remove(str(ctx.author.id))

		else:
			embed = discord.Embed(title="–û—à–∏–±–∫–∞!",
								  description=f"**{ctx.author.mention}** –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑ –≤ 6 —á–∞—Å–∞.",
								  color=0xef3417)
			await ctx.send(embed=embed)


async def open_account(user):

	users = await get_main_data()

	if str(user.id) in users:
		return False
	else:
		users[str(user.id)] = {}
		users[str(user.id)]["Wallet"] = 0
		users[str(user.id)]["Bank"] = 0

	with open('main.json', 'w') as f:
		json.dump(users, f)
	return True


async def get_main_data():
	with open("main.json", "r") as f:
		users = json.load(f)

	return users


async def update_bank(user, change=0, mode="Wallet"):
	users = await get_main_data()

	users[str(user.id)][mode] += change

	with open('main.json', 'w') as f:
		json.dump(users, f)
	bal = [users[str(user.id)]["Wallet"], users[str(user.id)]["Bank"]]
	return bal


def setup(Bot):
	Bot.add_cog(Economy(Bot))

	# @Bot.command() ### –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
	# async def sell(ctx,item,amount = 1):
	#	await open_account(ctx.author)
	#
	#	res = await sell_this(ctx.author,item,amount)
	#
	#	if not res[0]:
	#		if res[1]==1:
	#			await ctx.send("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç!")
	#			return
	#		if res[1]==2:
	#			await ctx.send(f"–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {amount} <:coin:791004475098660904> –µ–¥–µ–Ω–∏—Ü {item} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
	#			return
	#		if res[1]==3:
	#			await ctx.send(f"–£ —Ç–µ–±—è –Ω–µ—Ç {item} –≤ —Ä—é–∫–∑–∞–∫–µ.")
	#			return
	#
	#	await ctx.send(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª {amount} –µ–¥–µ–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ {item}.")
	#
	#
	# @Bot.command() ### –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
	# async def buy(ctx,item,amount = 1):
	#	await open_account(ctx.author)
	#
	#	res = await buy_this(ctx.author,item,amount)
	#
	#	if not res[0]:
	#		if res[1]==1:
	#			await ctx.send("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç!")
	#			return
	#		if res[1]==2:
	#			await ctx.send(f"–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞—Ç–µ –¥–µ–Ω–µ–≥ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å {amount} –µ–¥–µ–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ {item}")
	#			return
	#
	#
	#	await ctx.send(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª {amount} –µ–¥–µ–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ {item}")
	#
	# @Bot.command() ### –í—ã–≤–æ–¥ –æ–∫–Ω–∞ —Ä—é–∫–∑–∞–∫–∞
	# async def bag(ctx):
	#	await open_account(ctx.author)
	#	user = ctx.author
	#	users = await get_main_data()
	#
	#	try:
	#		bag = users[str(user.id)]["Bag"]
	#	except:
	#		bag = []
	#
	#
	#	em = discord.Embed(title = "Bag")
	#	for item in bag:
	#		name = item["Item"]
	#		amount = item["Amount"]
	#
	#		em.add_field(name = name, value = amount)
	#
	#	await ctx.send(embed = em)

	# async def buy_this(user,item_name,amount):
	#	item_name = item_name.lower()
	#	name_ = None
	#	for item in mainshop:
	#		name = item["name"].lower()
	#		if name == item_name:
	#			name_ = name
	#			price = item["price"]
	#			break
	#
	#	if name_ == None:
	#		return [False,1]
	#
	#	cost = price*amount
	#
	#	users = await get_main_data()
	#
	#	bal = await update_bank(user)
	#
	#	if bal[0]<cost:
	#		return [False,2]
	#
	#
	#	try:
	#		index = 0
	#		t = None
	#		for thing in users[str(user.id)]["Bag"]:
	#			n = thing["Item"]
	#			if n == item_name:
	#				old_amt = thing["Amount"]
	#				new_amt = old_amt + amount
	#				users[str(user.id)]["Bag"][index]["Amount"] = new_amt
	#				t = 1
	#				break
	#			index+=1
	#		if t == None:
	#			obj = {"Item":item_name , "Amount" : amount}
	#			users[str(user.id)]["Bag"].append(obj)
	#	except:
	#		obj = {"Item":item_name , "Amount" : amount}
	#		users[str(user.id)]["Bag"] = [obj]
	#
	#	with open("main.json","w") as f:
	#		json.dump(users,f)
	#
	#	await update_bank(user,cost*-1,"Wallet")
	#
	#	return [True,"Worked"]
	#
	#
	# async def sell_this(user,item_name,amount,price = None):
	#	item_name = item_name.lower()
	#	name_ = None
	#	for item in mainshop:
	#		name = item["name"].lower()
	#		if name == item_name:
	#			name_ = name
	#			if price==None:
	#				price = 0.9* item["price"]
	#			break
	#
	#	if name_ == None:
	#		return [False,1]
	#
	#	cost = price*amount
	#
	#	users = await get_main_data()
	#
	#	bal = await update_bank(user)
	#
	#
	#	try:
	#		index = 0
	#		t = None
	#		for thing in users[str(user.id)]["Bag"]:
	#			n = thing["Item"]
	#			if n == item_name:
	#				old_amt = thing["Amount"]
	#				new_amt = old_amt - amount
	#				if new_amt < 0:
	#					return [False,2]
	#				users[str(user.id)]["Bag"][index]["Amount"] = new_amt
	#				t = 1
	#				break
	#			index+=1
	#		if t == None:
	#			return [False,3]
	#	except:
	#		return [False,3]
	#
	#	with open("main.json","w") as f:
	#		json.dump(users,f)
	#
	#	await update_bank(user,cost,"Wallet")
	#
	#	return [True,"Worked"]
	#
