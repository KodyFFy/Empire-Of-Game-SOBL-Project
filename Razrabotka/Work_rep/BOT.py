import json
import discord
from discord.ext import commands
import random
from bin import info
import asyncio
import datetime

pref = info['PREFIX']
Bot = commands.Bot( command_prefix = pref )
name_Shop_id = "Roles"

wait_beg = []
wait_rob = []


@Bot.event
async def on_ready():
	print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
### –†–æ–∑—ã–≥—Ä—ã—à–∏ ###




##################################################################################

#mainshop = [{"name":"Watch","price":100,"description":"Time"},
#            {"name":"Laptop","price":1000,"description":"Work"},
#            {"name":"PC","price":10000,"description":"Gaming"}]
#
#
#@Bot.command() ### –í—ã–≤—ã–æ–¥ –æ–∫–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
#async def shop(ctx): 
#    em = discord.Embed(title = "–ú–∞–≥–∞–∑–∏–Ω")
#   for item in mainshop:
#   	name = item["name"]
#   	price = item["price"]
#   	desc = item["description"]
#   	em.add_field(name = name, value = f'{price} <:coin:791004475098660904> | –û–ø–∏—Å–∞–Ω–∏–µ: {desc}')
#   await ctx.send(embed = em)

Bot.remove_command('help')
@Bot.command()
async def help(ctx):



	embed=discord.Embed(title="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ", description="–ó–∞—á–µ—Ä–∫—É–Ω—ã—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ~~{}–∫–æ–º–∞–Ω–¥–∞~~".format(pref), color=0x1fefec)
	embed.add_field(name="{}help".format(pref), value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫", inline=True)
	embed.add_field(name="{}cash/balance (_ –∏–ª–∏ [player])".format(pref), value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –∏–ª–∏ –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞", inline=True)
	embed.add_field(name="{}beg/work".format(pref), value="–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥", inline=True)
	embed.add_field(name="{}deposit [—á–∏—Å–ª–æ]/put [—á–∏—Å–ª–æ]".format(pref), value="–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª–æ–∂–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –±–∞–Ω–∫ –¥–ª—è –∑–∞—â–∏—Ç—ã", inline=True)
	embed.add_field(name="{}withdraw/decision".format(pref), value="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–Ω–∞—è—Ç–∏—è –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ", inline=True)
	embed.add_field(name="{}send [player] [—á–∏—Å–ª–æ]".format(pref), value="–¢—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å –∏–≥—Ä–æ–∫—É –¥–µ–Ω—å–≥–∏", inline=True)
	embed.add_field(name="{}slots [—Å—Ç–∞–≤–∫–∞]".format(pref), value="–¢—ã —Å—ã–≥—Ä–∞–µ—à—å –≤ —Å–ª–æ—Ç—ã", inline=True)

	embed.add_field(name="~~{}bag~~".format(pref), value="–û—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", inline=True)
	embed.add_field(name="~~{}buy~~".format(pref), value="–ö—É–ø–∏—Ç—å –≤–µ—â—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ", inline=True)
	embed.add_field(name="~~{}sell~~".format(pref), value="–ü—Ä–æ–¥–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—É—é –≤–µ—â—å", inline=True)
	embed.add_field(name="~~{}shop~~".format(pref), value="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", inline=True)

	await ctx.send(embed=embed)



@Bot.command() ### –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
async def sell(ctx,item,amount = 1):
    await open_account(ctx.author)

    res = await sell_this(ctx.author,item,amount)

    if not res[0]:
        if res[1]==1:
            await ctx.send("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç!")
            return
        if res[1]==2:
            await ctx.send(f"–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {amount} <:coin:791004475098660904> –µ–¥–µ–Ω–∏—Ü {item} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            return
        if res[1]==3:
            await ctx.send(f"–£ —Ç–µ–±—è –Ω–µ—Ç {item} –≤ —Ä—é–∫–∑–∞–∫–µ.")
            return

    await ctx.send(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª {amount} –µ–¥–µ–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ {item}.")


@Bot.command() ### –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
async def buy(ctx,item,amount = 1):
    await open_account(ctx.author)

    res = await buy_this(ctx.author,item,amount)

    if not res[0]:
        if res[1]==1:
            await ctx.send("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç!")
            return
        if res[1]==2:
            await ctx.send(f"–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞—Ç–µ –¥–µ–Ω–µ–≥ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å {amount} –µ–¥–µ–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ {item}")
            return


    await ctx.send(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª {amount} –µ–¥–µ–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ {item}")


@Bot.command() ### –í—ã–≤–æ–¥ –æ–∫–Ω–∞ —Ä—é–∫–∑–∞–∫–∞
async def bag(ctx):
    await open_account(ctx.author)
    user = ctx.author
    users = await get_main_data()

    try:
        bag = users[str(user.id)]["Bag"]
    except:
        bag = []


    em = discord.Embed(title = "Bag")
    for item in bag:
        name = item["Item"]
        amount = item["Amount"]

        em.add_field(name = name, value = amount)    

    await ctx.send(embed = em) 



@Bot.command(aliases = ['cash','balance']) ### –ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç–æ—á–∫–∞
async def __balance(ctx, member: discord.Member = None):
	if member is None:

		await open_account(ctx.author)

		user = ctx.author
		users = await get_main_data()

		emb = discord.Embed(title = f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {ctx.author.name}",color = discord.Color.dark_gold())

		wallet_amt = users[str(user.id)]['Wallet']
		bank_amt = users[str(user.id)]['Bank']

		emb.add_field(name = "–ë–∞–ª–∞–Ω—Å ", value = f"{wallet_amt} <:coin:791004475098660904>")
		emb.add_field(name = "–ë–∞–Ω–∫", value = f"{bank_amt} <:coin:791004475098660904>")

		await ctx.send(embed = emb)
	else: 
		await open_account(member)
		user = member
		users = await get_main_data()

		em = discord.Embed(title = f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.name}",color = discord.Color.dark_gold())

		wallet_amt = users[str(user.id)]['Wallet']
		bank_amt = users[str(user.id)]['Bank']

		em.add_field(name = "–ë–∞–ª–∞–Ω—Å ", value = f"{wallet_amt} <:coin:791004475098660904>")
		em.add_field(name = "–ë–∞–Ω–∫", value = f"{bank_amt} <:coin:791004475098660904>")

		await ctx.send(embed = em)
@Bot.command(aliases = ['beg','work']) ### –†–∞–±–æ—Ç–∞—Ç—å
async def __beg(ctx):
	await open_account(ctx.author)

	users = await get_main_data()
	user = ctx.author

	earn = random.randrange(300)





	if not str(ctx.author.id) in wait_beg:


		
		await ctx.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ctx.author} –ø–æ–ª—É—á–∏–ª {earn} <:coin:791004475098660904>!")


		users[str(user.id)]['Wallet'] += earn

		wait_beg.append(str(ctx.author.id))

		await asyncio.sleep(2*60*60)

		wait_beg.remove(str(ctx.author.id))


		with open('main.json','w') as f:
			json.dump(users,f)

	else:
		emb = discord.Embed(description = f'**{ctx.author}** –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑ –≤ 2 —á–∞—Å–∞.')		
		await ctx.send(embed = emb)



@Bot.command(aliases = ['withdraw','decision']) ### –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–Ω–∫–∞
async def __withdraw(ctx, amount = None):
	await open_account(ctx.author)
	if amount == None:
		await ctx.send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞")
		return
	bal = await update_bank(ctx.author)

	amount = int(amount)

	if amount > bal[1]:
		await ctx.send("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ <:coin:791004475098660904> –Ω–∞ —Å—á–µ—Ç–µ :(")
		return
	if amount<0:
		await ctx.send("–°—É–º–º–∞ <:coin:791004475098660904> –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
		return

	await update_bank(ctx.author, amount)
	await update_bank(ctx.author, -1*amount, "Bank")
	await ctx.send(f"–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª {amount} <:coin:791004475098660904>")



@Bot.command(aliases = ['deposit','put']) ### –°–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –≤ –±–∞–Ω–∫–µ
async def __deposit(ctx, amount = None):
	await open_account(ctx.author)
	if amount == None:
		await ctx.send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ <:coin:791004475098660904>")
		return
	bal = await update_bank(ctx.author)

	amount = int(amount)

	if amount > bal[0]:
		await ctx.send("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ <:coin:791004475098660904> –Ω–∞ —Å—á–µ—Ç–µ :(")
		return
	if amount<0:
		await ctx.send("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
		return

	await update_bank(ctx.author, -1*amount)
	await update_bank(ctx.author, amount, "Bank")
	await ctx.send(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–æ–∂–∏–ª –Ω–∞ —Å—á–µ—Ç {amount} <:coin:791004475098660904>")



@Bot.command() ### –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏
async def send(ctx, member: discord.Member,amount = None):
	await open_account(ctx.author)
	await open_account(member)
	if amount == None:
		await ctx.send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞")
		return
	bal = await update_bank(ctx.author)

	amount = int(amount)

	if amount > bal[1]:
		await ctx.send("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ <:coin:791004475098660904> –Ω–∞ —Å—á–µ—Ç–µ :(")
		return
	if amount<0:
		await ctx.send("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
		return

	await update_bank(ctx.author, -1*amount, "Bank")
	await update_bank(member, amount, "Bank")
	await ctx.send(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member} –Ω–∞ —Å—á–µ—Ç {amount} <:coin:791004475098660904>")


@Bot.command() ### –°–ª–æ—Ç—ã 3*
async def slots(ctx,amount = None):

	await open_account(ctx.author)
	if amount == None:
		await ctx.send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞")
		return
	bal = await update_bank(ctx.author)

	amount = int(amount)

	if amount > bal[0]:
		await ctx.send("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ <:coin:791004475098660904> –Ω–∞ —Å—á–µ—Ç–µ :(")
		return
	if amount<0:
		await ctx.send("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
		return

	final = []
	for i in range(3):
		a = random.choice(["üí∞","üí°","üîã"])
		final.append (a)
	l = ' '.join(final)
	await ctx.send("["+str(l)+"]")

	if final[0] == final[1] == final[2]:
		al = amount * 3
		await ctx.send(f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª –î–ñ–ï–ö–ü–û–¢! –¢—ã –ø–æ–ª—É—á–∏–ª {al} <:coin:791004475098660904>")
		await update_bank(ctx.author, 3*amount)


	elif final[0] == final[1]  or final[1] == final[2]:
		await update_bank(ctx.author, 1.5*amount)
		al = amount * 1.5
		await ctx.send(f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª! –¢—ã –ø–æ–ª—É—á–∏–ª {al} <:coin:791004475098660904>")

	else: 
		await update_bank(ctx.author, -1*amount)
		await ctx.send("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª —Å–≤–æ—é —Å—Ç–∞–≤–∫—É!")

@Bot.command() ### –û–≥—Ä–∞–±–∏—Ç—å
async def rob(ctx, member: discord.Member):
	await open_account(ctx.author)
	await open_account(member)

	bal = await update_bank(member)






	if not str(ctx.author.id) in wait_rob:

		if bal[0]<100:
			await ctx.send("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç!")
			return

		earning = random.randrange(0,bal[0]//3)


		random_event = random.randint(0,100)

		if random_event >= 30:
			await update_bank(ctx.author, earning)
			await update_bank(member, -1*earning)
			await ctx.send(f"–¢—ã —É–¥–∞—á–Ω–æ –æ–±–æ–∫—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member}. –¢—ã —Å–≤–æ—Ä–æ–≤–∞–ª {earning} <:coin:791004475098660904>")
		else:
			plata = earning - (earning/3)
			await update_bank(ctx.author, -1*palata)
			await update_bank(member, earning)
			await ctx.send(f"–¢–µ–±—è –ø–æ–π–º–∞–ª–∏ –∑–∞ –≤–æ—Ä–æ–≤—Å—Ç–≤–æ —É {member}. –¢–µ–±–µ –≤—ã–ø–∏—Å–∞–ª–∏ —à—Ç—Ä–∞—Ñ {earning} <:coin:791004475098660904>")

		wait_rob.append(str(ctx.author.id))

		await asyncio.sleep(6*60*60)

		wait_rob.remove(str(ctx.author.id))

	else:


		emb = discord.Embed(description = f'**{ctx.author}** –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤.')		
		await ctx.send(embed = emb)



@Bot.command()
async def rps(ctx,amount = None):

	await open_account(ctx.author)
	if amount == None:
		

		mes = await ctx.send("–ò–≥—Ä–∞: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞")


		await mes.add_reaction("‚úÇÔ∏è")
		await mes.add_reaction("ü™®")
		await mes.add_reaction("üì∞")

		Player_id = ctx.author.id

		mes_n = await ctx.channel.fetch_message(mes.id)

		users = mes_n.reactions[0].users().flatten()
		
		if Player_id in users:
			cho = "‚úÇÔ∏è"
			comp = ["‚úÇÔ∏è","ü™®","üì∞"]
			com_cho = random.choice(comp)

			if cho == com_cho:
				print("–ù–∏—á—å—è")

################### –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏ ###################


async def open_account(user):

	users = await get_main_data()

	if str(user.id) in users:
		return False
	else:
		users[str(user.id)] = {}
		users[str(user.id)]["Wallet"] = 0
		users[str(user.id)]["Bank"] = 0

	with open('main.json','w') as f:
		json.dump(users,f)
	return True


async def get_main_data():
	with open("main.json","r") as f:
		users = json.load(f)

	return users

async def update_bank(user, change = 0, mode = "Wallet"):
	users = await get_main_data()

	users[str(user.id)][mode] += change

	with open('main.json','w') as f:
		json.dump(users,f)
	bal = [users[str(user.id)]["Wallet"],users[str(user.id)]["Bank"]]
	return  bal



async def buy_this(user,item_name,amount):
    item_name = item_name.lower()
    name_ = None
    for item in mainshop:
        name = item["name"].lower()
        if name == item_name:
            name_ = name
            price = item["price"]
            break

    if name_ == None:
        return [False,1]

    cost = price*amount

    users = await get_main_data()

    bal = await update_bank(user)

    if bal[0]<cost:
        return [False,2]


    try:
        index = 0
        t = None
        for thing in users[str(user.id)]["Bag"]:
            n = thing["Item"]
            if n == item_name:
                old_amt = thing["Amount"]
                new_amt = old_amt + amount
                users[str(user.id)]["Bag"][index]["Amount"] = new_amt
                t = 1
                break
            index+=1 
        if t == None:
            obj = {"Item":item_name , "Amount" : amount}
            users[str(user.id)]["Bag"].append(obj)
    except:
        obj = {"Item":item_name , "Amount" : amount}
        users[str(user.id)]["Bag"] = [obj]        

    with open("main.json","w") as f:
        json.dump(users,f)

    await update_bank(user,cost*-1,"Wallet")

    return [True,"Worked"]


async def sell_this(user,item_name,amount,price = None):
    item_name = item_name.lower()
    name_ = None
    for item in mainshop:
        name = item["name"].lower()
        if name == item_name:
            name_ = name
            if price==None:
                price = 0.9* item["price"]
            break

    if name_ == None:
        return [False,1]

    cost = price*amount

    users = await get_main_data()

    bal = await update_bank(user)


    try:
        index = 0
        t = None
        for thing in users[str(user.id)]["Bag"]:
            n = thing["Item"]
            if n == item_name:
                old_amt = thing["Amount"]
                new_amt = old_amt - amount
                if new_amt < 0:
                    return [False,2]
                users[str(user.id)]["Bag"][index]["Amount"] = new_amt
                t = 1
                break
            index+=1 
        if t == None:
            return [False,3]
    except:
        return [False,3]    

    with open("main.json","w") as f:
        json.dump(users,f)

    await update_bank(user,cost,"Wallet")

    return [True,"Worked"]

################### –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏ ###################



##################################################################################

@Bot.event
async def ch_pr():
	await Bot.wait_until_ready()

	pings = ["–ü–æ—à–µ–ª –¥–µ–ª–∞—Ç—å —Å–∞–º–æ–≥–æ–Ω!","–•–æ—á—É –ø—Ä–∏–±–∞–≤–∫—É –∫ –ø–µ–Ω—Å–∏–∏!","–£—à–µ–ª –µ–±–∞—Ç—å —Å–æ—Å–µ–¥–∫—É –†–∏—Ç—É!","–ó–∞—Å–Ω—É–ª —Å—Ç–∞—Ä—á–µ—Å–∫–∏–º —Å–Ω–æ–º... Zzzz"]

	while not Bot.is_closed():

		ping = random.choice(pings)
		await Bot.change_presence(activity=discord.Game(ping))

		await asyncio.sleep(10)

Bot.loop.create_task(ch_pr())
Bot.run("NzkxOTc0MjE2OTQ5MDM5MTA0.X-W9dw.qzO1SrJUwVaKmihXOsYUr0gHgF8")